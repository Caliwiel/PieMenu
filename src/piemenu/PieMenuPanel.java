/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package piemenu;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RadialGradientPaint;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;

/**
 *
 * @author bouzekel
 */
public class PieMenuPanel extends javax.swing.JPanel implements ITransformable {

    private final static int DIAMETRE_CENTRE = 15;
    double x, y;
    int withPie;
    int xDep, yDep;
    private double posClicX;
    private double posClickY;
    private StateMachine statemachine;

    /**
     * Creates new form NewJPanel
     */
    public PieMenuPanel() {
        initComponents();
    }

    public PieMenuPanel(int h, int w, double x, double y, int width) {
        initComponents();
        this.setPreferredSize(new Dimension(w, h));
        init();
        this.x = x;
        this.y = y;
        this.withPie = width;
    }

    private void init() {
       this.statemachine = new StateMachine(this);
    }

    private Buttuns getButtun(double x, double y) {
        Buttuns buttuns;
        if (((x < posClicX + DIAMETRE_CENTRE) && (y < posClickY + DIAMETRE_CENTRE)) || ((x < posClicX + DIAMETRE_CENTRE) && (y < posClickY - DIAMETRE_CENTRE)) || ((x < posClicX - DIAMETRE_CENTRE) && (y < posClickY - DIAMETRE_CENTRE)) || ((x < posClicX - DIAMETRE_CENTRE) && (y < posClickY + DIAMETRE_CENTRE))) {
            //dans cercle
            buttuns = Buttuns.AUCUN;
        } else if ((posClicX > x + withPie / 2 || posClicX < x - withPie / 2) && (posClickY > y + withPie / 2 || posClickY < y - withPie / 2)) {
            //hors pie menu
            buttuns = Buttuns.AUCUN;
        } else if (x > posClicX) {
            if (y > posClickY) {
                buttuns = Buttuns.PRECEDENT;
            } else {
                buttuns = Buttuns.MODIFIER;
            }
        } else if (y > posClickY) {
            buttuns = Buttuns.SUIVANT;
        } else {
            buttuns = Buttuns.SUPPRIMER;
        }
        return buttuns;
    }

    public double getXpie() {
        return xDep;
    }

    public void setXpie(double x) {
        this.xDep = (int) (x - withPie / 2);
        this.posClicX = x;
        repaint();
    }

    public double getYpie() {
        return yDep;
    }

    public void setYpie(double y) {
        this.yDep = (int) (y - withPie / 2) - 30;
        this.posClickY = y;
        repaint();
    }

    public StateMachine getStatemachine() {
        return statemachine;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                onMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                onMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMouseMoved
        this.statemachine.handleMove();
    }//GEN-LAST:event_onMouseMoved

    private void onMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1) {
            this.statemachine.handleClickLeft();
        }
    }//GEN-LAST:event_onMousePressed

    private void onMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMouseReleased

    }//GEN-LAST:event_onMouseReleased

    @Override
    public void paintComponent(Graphics g) {
        /*    super.paintComponent(g);
        
        Graphics2D g2 = (Graphics2D)g;
	g2.setColor(Color.LIGHT_GRAY);
	
	g2.fillArc(xDep, yDep, withPie, withPie, 90, 90);
	// Tracer un cercle        
	g2.setColor(Color.BLUE);
	g2.fillArc(xDep, yDep, withPie, withPie, 0, 90);	
        g2.setColor(Color.GREEN);
	g2.fillArc(xDep, yDep, withPie, withPie, 180, 90);
        g2.setColor(Color.yellow);
	g2.fillArc(xDep, yDep, withPie, withPie, 270, 90);
        
        g2.setColor(Color.white);
        g2.fillOval(xDep+withPie/2-15, yDep+withPie/2-DIAMETRE_CENTRE, DIAMETRE_CENTRE*2, DIAMETRE_CENTRE*2);
        
        System.out.println("Paint component 2"); */
        //this.setVisible(true);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2 = (Graphics2D) g;
        // Tracer les arcs de cercle 
        g2.setColor(new Color(203, 219, 244));
        g2.fillArc(xDep, yDep, withPie, withPie, 90, 90);
        g2.setColor(new Color(199, 204, 214));
        g2.fillArc(xDep, yDep, withPie, withPie, 0, 90);
        g2.setColor(new Color(199, 204, 214));
        g2.fillArc(xDep, yDep, withPie, withPie, 180, 90);
        g2.setColor(new Color(203, 219, 244));
        g2.fillArc(xDep, yDep, withPie, withPie, 270, 90);
        drawCircle(g2);
        // Dessiner Labels
        g2.setColor(Color.GRAY);
        g2.drawString("Suivant", xDep + 20, yDep + 50);
        g2.drawString("Précedent", xDep + 5 + withPie / 2, yDep + 50);
        g2.drawString("Supprimer", xDep + 15, yDep + 40 + withPie / 2);
        g2.drawString("Modifier", xDep + 10 + withPie / 2, yDep + 40 + withPie / 2);
    }

    private void drawCircle(Graphics2D g2) {
        g2.setColor(new Color(232, 234, 237));
        g2.fillOval(xDep + withPie / 2 - 15, yDep + withPie / 2 - DIAMETRE_CENTRE, DIAMETRE_CENTRE * 2, DIAMETRE_CENTRE * 2);
    }

    @Override
    public void highlightSuivant() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        //paint(g2);
        g2.setPaint(new GradientPaint(5, 7, Color.WHITE, 400, 7, new Color(187, 210, 247)));
        g2.fillArc(xDep, yDep, withPie, withPie, 90, 90);
        g2.setColor(new Color(121, 134, 155));
        g2.drawString("Suivant", xDep + 20, yDep + 50);
        drawCircle(g2);
    }

    @Override
    public void highlightPrecedent() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        //paint(g2);
        g2.setPaint(new GradientPaint(5, 7, Color.WHITE, 400, 7, new Color(187, 210, 247)));
        g2.fillArc(xDep, yDep, withPie, withPie, 0, 90);
        g2.setColor(new Color(121, 134, 155));
        g2.drawString("Précedent", xDep + 5 + withPie / 2, yDep + 50);
        drawCircle(g2);
    }

    @Override
    public void highlightModifier() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        //paint(g2);
        g2.setPaint(new GradientPaint(5, 7, Color.WHITE, 400, 7, new Color(187, 210, 247)));
        g2.fillArc(xDep, yDep, withPie, withPie, 180, 90);
        g2.setColor(new Color(121, 134, 155));
        g2.drawString("Modifier", xDep + 10 + withPie / 2, yDep + 40 + withPie / 2);
        drawCircle(g2);
    }

    @Override
    public void highlightSupprimer() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        //paint(g2);
        g2.setPaint(new GradientPaint(5, 7, Color.WHITE, 400, 7, new Color(187, 210, 247)));
        g2.fillArc(xDep, yDep, withPie, withPie, 270, 90);
        g2.setColor(new Color(121, 134, 155));
        g2.drawString("Supprimer", xDep + 15, yDep + 40 + withPie / 2);
        drawCircle(g2);
    }

    /*
    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
	g2.setColor(Color.yellow);
	g2.fillArc((int)x-150, (int)y, 150, 150, 90, 90);
	// Tracer un cercle
	g2.setColor(Color.BLUE);
	g2.fillArc((int)x-150, (int)y, 150, 150, 0, 90);	
        g2.setColor(Color.GREEN);
	g2.fillArc((int)x-150, (int)y, 150, 150, 180, 90);
        g2.setColor(Color.yellow);
	g2.fillArc((int)x-150, (int)y, 150, 150, 270, 90);
        
        g2.setColor(Color.white);
        g2.fillOval((int)x-30, (int)y, 30, 30);
    }
    
    @Override
    public Dimension getPreferredSize () {
        Dimension dim = new Dimension(200, 200);
        return dim;
    }
     */
    @Override
    public void highlight(double x, double y) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean inModif() {
        return getButtun(posClicX, posClickY) == Buttuns.MODIFIER;
    }

    @Override
    public boolean inPrec() {
        return getButtun(posClicX, posClickY) == Buttuns.PRECEDENT;
    }

    @Override
    public boolean inSuiv() {
        System.out.println(getButtun(posClicX, posClickY).toString());
        //return getButtun(posClicX, posClickY) == Buttuns.SUIVANT;
        return true;
    }

    @Override
    public boolean inSuppr() {
        return getButtun(posClicX, posClickY) == Buttuns.SUPPRIMER;
    }

    @Override
    public boolean inAfficher() {
        return getButtun(posClicX, posClickY) == Buttuns.AUCUN;
    }

    @Override
    public void afficherPie() {
        this.setVisible(true);
    }

    @Override
    public void enleverPie() {
        this.setVisible(false);
    }

    @Override
    public double getXevent() {
        return posClicX;
    }

    @Override
    public double getYevent() {
        return posClickY;
    }

    @Override
    public void setAllReset() {
        paint(getGraphics());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
