/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package piemenu;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RadialGradientPaint;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;

/**
 *
 * @author bouzekel on 21/11/2016.
 * Vue du Pie Menu.
 */
public class PieMenu extends javax.swing.JPanel implements ITransformable {

    private final static int DIAMETRE_CENTRE = 15;
    
    private final static Color COLOR1 = new Color(203, 219, 244);
    private final static Color COLOR2 = new Color(199, 204, 214);
    private final static Color COLOR3 = new Color(199, 204, 214);
    private final static Color COLOR4 = new Color(203, 219, 244);
    private final static Color STRING_COLOR = new Color(121, 134, 155);
    private final static Color STRING_COLOR_SELECTED = new Color(187, 227, 247);
    
    private final static int START_ANGLE1 = 90;
    private final static int END_ANGLE1 = 90;
    private final static int START_ANGLE2 = 0;
    private final static int END_ANGLE2 = 90;
    private final static int START_ANGLE3 = 180;
    private final static int END_ANGLE3 = 90;
    private final static int START_ANGLE4 = 270;
    private final static int END_ANGLE4 = 90;
    
    
    int withPie;
    int xDep, yDep;
    private double posClickX;
    private double posClickY;
    private StateMachine statemachine;

    /**
     * Creates new form NewJPanel
     */
    public PieMenu() {
        initComponents();
    }

    public PieMenu(int h, int w, double x, double y, int width) {
        initComponents();
        this.setPreferredSize(new Dimension(w, h));
        init();
        this.withPie = width;
    }

    private void init() {
        this.statemachine = new StateMachine(this);
    }

    private Buttons getButtun(double x, double y) {
        Buttons buttuns;
        double dx = Math.abs(x - posClickX);
        double dy = Math.abs(y - posClickY);
        if (dx <= DIAMETRE_CENTRE && dy <= DIAMETRE_CENTRE && dx >= 0 && dy >= 0) {
            //dans cercle
            buttuns = Buttons.AUCUN;
        }
        else if (dx > withPie/2 || dy+20 > withPie/2 || dx < 0 || dy < 0){ //hors du pie            
            buttuns = Buttons.AUCUN;
        }
        else if (x >= posClickX) {
            if (y >= posClickY) { // x > posX et y > posY
                buttuns = Buttons.MODIFIER;
            } else { //x > posX et y < posY
                buttuns = Buttons.PRECEDENT;
            }
        } else {
            if (y >= posClickY) { //x < posx et y > posY
                buttuns = Buttons.SUPPRIMER;
            } else { //x et y < posx et posy
                buttuns = Buttons.SUIVANT;

            }
        }
        return buttuns;
    }

    public double getXpie() {
        return xDep;
    }

    public void setXpie(double x) {
        this.xDep = (int) (x - withPie / 2);
        this.posClickX = x;
        repaint();
    }

    public double getYpie() {
        return yDep;
    }

    public void setYpie(double y) {
        this.yDep = (int) (y - withPie / 2) - 30;
        this.posClickY = y - 30;
        repaint();
    }

    public StateMachine getStatemachine() {
        return statemachine;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                onMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                onMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMouseMoved
        this.statemachine.cMove(evt.getX(), evt.getY());
    }//GEN-LAST:event_onMouseMoved

    private void onMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1) {
            this.statemachine.cPressedLeft();
        }
    }//GEN-LAST:event_onMousePressed

    private void onMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON1) {
            this.statemachine.cReleased();
        }
    }//GEN-LAST:event_onMouseReleased

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2 = (Graphics2D) g;
        // Tracer les arcs de cercle 
        g2.setColor(COLOR1);
        g2.fillArc(xDep, yDep, withPie, withPie, START_ANGLE1, END_ANGLE1);
        g2.setColor(COLOR2);
        g2.fillArc(xDep, yDep, withPie, withPie, START_ANGLE2, END_ANGLE2);
        g2.setColor(COLOR3);
        g2.fillArc(xDep, yDep, withPie, withPie, START_ANGLE3, END_ANGLE3);
        g2.setColor(COLOR4);
        g2.fillArc(xDep, yDep, withPie, withPie, START_ANGLE4, END_ANGLE4);
        drawCircle(g2);
        // Dessiner Labels
        g2.setColor(Color.GRAY);
        g2.drawString("Suivant", xDep + 20, yDep + 50);
        g2.drawString("Précedent", xDep + 5 + withPie / 2, yDep + 50);
        g2.drawString("Supprimer", xDep + 15, yDep + 40 + withPie / 2);
        g2.drawString("Modifier", xDep + 10 + withPie / 2, yDep + 40 + withPie / 2);
    }

    private void drawCircle(Graphics2D g2) {
        g2.setColor(new Color(232, 234, 237));
        g2.fillOval(xDep + withPie / 2 - 15, yDep + withPie / 2 - DIAMETRE_CENTRE, DIAMETRE_CENTRE * 2, DIAMETRE_CENTRE * 2);
    }

    private void highlightQuartier(Graphics2D g2, int startAngle, int arcAngle) {
        paint(g2);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setPaint(new GradientPaint(5, 7, Color.WHITE, 400, 7, new Color(187, 210, 247)));
        g2.fillArc(xDep, yDep, withPie, withPie, startAngle, arcAngle);
    }

    private void setColorStringQuartier(Graphics2D g2, Color color, String string, int x, int y) {
        g2.setColor(color);
        g2.setFont(new Font("default", Font.BOLD, 14));
        g2.drawString(string, x-5, y);
    }

    @Override
    public void highlightSuivant() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        highlightQuartier(g2, START_ANGLE1, END_ANGLE1);
        setColorStringQuartier(g2, STRING_COLOR, "Suivant", xDep + 20, yDep + 50);
        drawCircle(g2);
    }

    @Override
    public void highlightPrecedent() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        highlightQuartier(g2, START_ANGLE2, END_ANGLE2);
        setColorStringQuartier(g2, STRING_COLOR, "Précedent", xDep + 5 + withPie / 2, yDep + 50);
        drawCircle(g2);
    }

    @Override
    public void highlightSupprimer() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        highlightQuartier(g2, START_ANGLE3, END_ANGLE4);
        setColorStringQuartier(g2, STRING_COLOR, "Supprimer", xDep + 15, yDep + 40 + withPie / 2);
        drawCircle(g2);
    }
    
    @Override
    public void highlightModifier() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        highlightQuartier(g2, START_ANGLE4, END_ANGLE4);
        setColorStringQuartier(g2, STRING_COLOR, "Modifier", xDep + 10 + withPie / 2, yDep + 40 + withPie / 2);
        drawCircle(g2);
    }

    @Override
    public boolean inModif(double x, double y) {
        return getButtun(x, y) == Buttons.MODIFIER;
    }

    @Override
    public boolean inPrec(double x, double y) {
        return getButtun(x, y) == Buttons.PRECEDENT;
    }

    @Override
    public boolean inSuiv(double x, double y) {
        return getButtun(x, y) == Buttons.SUIVANT;
    }

    @Override
    public boolean inSuppr(double x, double y) {
        return getButtun(x, y) == Buttons.SUPPRIMER;
    }

    @Override
    public boolean inAfficher(double x, double y) {
        return getButtun(x, y) == Buttons.AUCUN;
    }

    @Override
    public void afficherPie() {
        this.setVisible(true);
    }

    @Override
    public void enleverPie() {
        this.setVisible(false);
    }

    @Override
    public double getXevent() {
        return posClickX;
    }

    @Override
    public double getYevent() {
        return posClickY;
    }

    @Override
    public void setAllReset() {
        paint(getGraphics());
    }

    @Override
    public void selectSuivant() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        setColorStringQuartier(g2, STRING_COLOR_SELECTED, "Suivant", xDep + 20, yDep + 50);
    }

    @Override
    public void selectPrecedent() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        setColorStringQuartier(g2, STRING_COLOR_SELECTED, "Précedent", xDep + 5 + withPie / 2, yDep + 50);

    }

    @Override
    public void selectModifier() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        setColorStringQuartier(g2, STRING_COLOR_SELECTED, "Modifier", xDep + 10 + withPie / 2, yDep + 40 + withPie / 2);

    }

    @Override
    public void selectSupprimer() {
        Graphics2D g2 = (Graphics2D) getGraphics();
        setColorStringQuartier(g2, STRING_COLOR_SELECTED, "Supprimer", xDep + 15, yDep + 40 + withPie / 2);

    }

    @Override
    public boolean inLimits(double x, double y) {
        return !(x-withPie/2 < 0 || x+withPie/2 > getParent().getWidth() || y-withPie/2 < 0 || y+withPie/2 > getParent().getHeight());
    }

    @Override
    public void changeInLimits() {
        if (posClickX-withPie/2 < 0) {            
            setXpie(withPie/2);
        }        
        if (posClickX+withPie/2 > getParent().getWidth()) {
            setXpie(getParent().getWidth() - withPie/2);
        }
        if (posClickY-withPie/2 + 30 < 0) {
            setYpie(withPie/2 + 30);
        }        
        if (posClickY+withPie/2 - 30 > getParent().getHeight()) {
            setYpie(getParent().getHeight()- withPie/2 + 30);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
